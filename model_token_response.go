package conekta

import (
	"encoding/json"
)

// checks if the TokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenResponse{}

// TokenResponse token response
type TokenResponse struct {
	// Deprecated
	Checkout NullableTokenResponseCheckout `json:"checkout,omitempty"`
	// Unique identifier for the token generated by Conekta.
	Id string `json:"id"`
	// Indicates whether the token is in live mode or test mode.
	Livemode bool `json:"livemode"`
	// Indicates the type of object, in this case token
	Object string `json:"object"`
	// Indicates if the token has been used
	Used bool `json:"used"`
}

// NewTokenResponse instantiates a new TokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenResponse(id string, livemode bool, object string, used bool) *TokenResponse {
	this := TokenResponse{}
	this.Id = id
	this.Livemode = livemode
	this.Object = object
	this.Used = used
	return &this
}

// NewTokenResponseWithDefaults instantiates a new TokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenResponseWithDefaults() *TokenResponse {
	this := TokenResponse{}
	return &this
}

// GetCheckout returns the Checkout field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TokenResponse) GetCheckout() TokenResponseCheckout {
	if o == nil || IsNil(o.Checkout.Get()) {
		var ret TokenResponseCheckout
		return ret
	}
	return *o.Checkout.Get()
}

// GetCheckoutOk returns a tuple with the Checkout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TokenResponse) GetCheckoutOk() (*TokenResponseCheckout, bool) {
	if o == nil {
		return nil, false
	}
	return o.Checkout.Get(), o.Checkout.IsSet()
}

// HasCheckout returns a boolean if a field has been set.
func (o *TokenResponse) HasCheckout() bool {
	if o != nil && o.Checkout.IsSet() {
		return true
	}

	return false
}

// SetCheckout gets a reference to the given NullableTokenResponseCheckout and assigns it to the Checkout field.
// Deprecated
func (o *TokenResponse) SetCheckout(v TokenResponseCheckout) {
	o.Checkout.Set(&v)
}

// SetCheckoutNil sets the value for Checkout to be an explicit nil
func (o *TokenResponse) SetCheckoutNil() {
	o.Checkout.Set(nil)
}

// UnsetCheckout ensures that no value is present for Checkout, not even an explicit nil
func (o *TokenResponse) UnsetCheckout() {
	o.Checkout.Unset()
}

// GetId returns the Id field value
func (o *TokenResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TokenResponse) SetId(v string) {
	o.Id = v
}

// GetLivemode returns the Livemode field value
func (o *TokenResponse) GetLivemode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Livemode
}

// GetLivemodeOk returns a tuple with the Livemode field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetLivemodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Livemode, true
}

// SetLivemode sets field value
func (o *TokenResponse) SetLivemode(v bool) {
	o.Livemode = v
}

// GetObject returns the Object field value
func (o *TokenResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *TokenResponse) SetObject(v string) {
	o.Object = v
}

// GetUsed returns the Used field value
func (o *TokenResponse) GetUsed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetUsedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *TokenResponse) SetUsed(v bool) {
	o.Used = v
}

func (o TokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Checkout.IsSet() {
		toSerialize["checkout"] = o.Checkout.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["livemode"] = o.Livemode
	toSerialize["object"] = o.Object
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

type NullableTokenResponse struct {
	value *TokenResponse
	isSet bool
}

func (v NullableTokenResponse) Get() *TokenResponse {
	return v.value
}

func (v *NullableTokenResponse) Set(val *TokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenResponse(val *TokenResponse) *NullableTokenResponse {
	return &NullableTokenResponse{value: val, isSet: true}
}

func (v NullableTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
