/*
Conekta API

Testing AntifraudApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package conekta_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/plevym/conekta-go"
)

func Test_conekta_AntifraudApiService(t *testing.T) {

	configuration := conekta.NewConfiguration()
	configuration.Host = _basePath
	configuration.Scheme = "http"
	apiClient := conekta.NewAPIClient(configuration)

	t.Run("Test AntifraudApiService CreateRuleBlacklist", func(t *testing.T) {
		req := conekta.CreateRiskRulesData{
			Description: "desc",
			Field:       "field",
			Value:       "value",
		}
		resp, httpRes, err := apiClient.AntifraudApi.CreateRuleWhitelist(context.TODO()).
			CreateRiskRulesData(req).
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test AntifraudApiService CreateRuleWhitelist", func(t *testing.T) {
		req := conekta.CreateRiskRulesData{
			Description: "desc",
			Field:       "field",
			Value:       "value",
		}
		resp, httpRes, err := apiClient.AntifraudApi.CreateRuleWhitelist(context.TODO()).
			CreateRiskRulesData(req).
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test AntifraudApiService DeleteRuleBlacklist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.DeleteRuleWhitelist(context.TODO(), "618c3f2fdb8b8da9be376afe").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test AntifraudApiService DeleteRuleWhitelist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.DeleteRuleBlacklist(context.TODO(), "618c3f30db8b8da9be376b1e").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test AntifraudApiService GetRuleBlacklist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.GetRuleBlacklist(context.TODO()).
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test AntifraudApiService GetRuleWhitelist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.GetRuleWhitelist(context.TODO()).
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

}
