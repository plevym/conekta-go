/*
Conekta API

Testing PaymentLinkApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package conekta_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/plevym/conekta-go"
)

func Test_conekta_PaymentLinkApiService(t *testing.T) {

	configuration := conekta.NewConfiguration()
	configuration.Host = _basePath
	configuration.Scheme = "http"
	apiClient := conekta.NewAPIClient(configuration)

	t.Run("Test PaymentLinkApiService CancelCheckout", func(t *testing.T) {
		resp, httpRes, err := apiClient.PaymentLinkApi.CancelCheckout(context.TODO(), "ff6918c6-5043-43b9-a7ec-d40d407d62c1").
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test PaymentLinkApiService CreateCheckout", func(t *testing.T) {
		req := conekta.Checkout{
			AllowedPaymentMethods: []string{
				"method",
			},
			Type:      "PaymentLink",
			Name:      "FooCheckout",
			Recurrent: false,
		}
		resp, httpRes, err := apiClient.PaymentLinkApi.CreateCheckout(context.TODO()).
			Checkout(req).
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test PaymentLinkApiService EmailCheckout", func(t *testing.T) {
		req := conekta.EmailCheckoutRequest{Email: "foo@foo.com"}
		resp, httpRes, err := apiClient.PaymentLinkApi.EmailCheckout(context.TODO(), "ff6918c6-5043-43b9-a7ec-d40d407d62c1").
			EmailCheckoutRequest(req).
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test PaymentLinkApiService GetCheckout", func(t *testing.T) {
		resp, httpRes, err := apiClient.PaymentLinkApi.GetCheckout(context.TODO(), "ff6918c6-5043-43b9-a7ec-d40d407d62c1").
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test PaymentLinkApiService GetCheckouts", func(t *testing.T) {
		resp, httpRes, err := apiClient.PaymentLinkApi.GetCheckouts(context.TODO()).
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

	t.Run("Test PaymentLinkApiService SmsCheckout", func(t *testing.T) {
		req := conekta.SmsCheckoutRequest{Phonenumber: "12312312312"}
		resp, httpRes, err := apiClient.PaymentLinkApi.SmsCheckout(context.TODO(), "ff6918c6-5043-43b9-a7ec-d40d407d62c1").
			SmsCheckoutRequest(req).
			AcceptLanguage("es").
			Execute()

		if err != nil {
			t.Fatalf("expected err nil but was %v", err)
		}
		if resp == nil {
			t.Fatalf("expected resp not nil but was %v", resp)
		}
		if httpRes.StatusCode != http.StatusOK {
			t.Fatalf("expected StatusCode 200 OK but was %d", httpRes.StatusCode)
		}

	})

}
